/* The following code was generated by JFlex 1.4.3 on 17/07/11 14:07 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/07/11 14:07 from the specification file
 * <tt>/home/junichi11/hg/web-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 32;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CONSTANT_NAME = 28;
  public static final int ST_PHP_LOOKING_FOR_STATIC_PROPERTY = 10;
  public static final int ST_PHP_DOC_COMMENT = 34;
  public static final int ST_PHP_LINE_COMMENT = 36;
  public static final int ST_PHP_LOOKING_FOR_FUNCTION_NAME = 26;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 40;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 38;
  public static final int ST_PHP_VAR_OFFSET = 30;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\15\2\0\1\21\22\0\1\16\1\32\1\23\1\122"+
    "\1\22\1\36\1\37\1\104\1\105\1\71\1\34\1\31\1\106\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\113\1\20\1\33\1\27\1\30"+
    "\1\43\1\42\1\46\1\10\1\74\1\50\1\3\1\7\1\101\1\103"+
    "\1\75\1\115\1\112\1\100\1\110\1\47\1\44\1\76\1\117\1\45"+
    "\1\73\1\77\1\102\1\114\1\111\1\6\1\107\1\13\1\121\1\24"+
    "\1\17\1\41\1\116\1\25\1\57\1\63\1\70\1\65\1\66\1\54"+
    "\1\62\1\103\1\51\1\67\1\112\1\55\1\110\1\52\1\56\1\72"+
    "\1\117\1\61\1\60\1\53\1\102\1\64\1\111\1\6\1\107\1\13"+
    "\1\26\1\40\1\120\1\42\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\1\12"+
    "\1\0\13\12\127\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\4\0\12\14\1\0\7\12\1\0\7\12\5\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12"+
    "\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\14\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\14\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\26\0\1\12\25\0\12\14\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\14\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\14\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\14\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\14\2\0\4\12\40\0\1\12\37\0\12\14\26\0"+
    "\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0\1\12\12\14"+
    "\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\1\0\12\14\6\0\46\12\1\0\1\12"+
    "\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12"+
    "\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0\15\12"+
    "\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12"+
    "\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14\46\0\12\14"+
    "\6\0\130\12\10\0\51\12\1\0\1\12\5\0\106\12\12\0\35\12"+
    "\51\0\12\14\36\12\2\0\5\12\13\0\54\12\25\0\7\12\10\0"+
    "\12\14\46\0\27\12\11\0\65\12\53\0\12\14\6\0\12\14\15\0"+
    "\1\12\135\0\57\12\21\0\7\12\4\0\12\14\51\0\36\12\15\0"+
    "\2\12\12\14\54\12\32\0\44\12\34\0\12\14\3\0\3\12\12\14"+
    "\44\12\153\0\4\12\1\0\4\12\3\0\2\12\11\0\300\12\100\0"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\64\0"+
    "\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\0"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\120\0"+
    "\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12\6\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12\20\0"+
    "\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12\3\0"+
    "\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0\57\12"+
    "\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12\4\0"+
    "\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12\14\0"+
    "\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0"+
    "\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0"+
    "\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0"+
    "\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0"+
    "\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\14\6\1\4\23\5\1\2\1\4\1\15\2\5"+
    "\1\4\2\5\1\16\1\17\1\20\1\21\1\22\2\21"+
    "\1\20\3\21\3\23\1\24\1\23\4\21\1\2\1\21"+
    "\2\25\3\2\1\0\1\2\2\26\1\2\1\27\1\30"+
    "\1\27\1\31\2\32\1\3\1\33\1\3\1\34\1\33"+
    "\1\35\4\0\4\36\2\37\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\0\1\3\2\0\6\5\1\45\2\0"+
    "\4\5\1\0\1\5\1\0\1\46\2\0\1\21\2\0"+
    "\2\6\1\0\1\47\1\50\1\51\1\52\4\5\1\53"+
    "\4\5\1\54\1\5\1\55\33\5\13\0\2\5\1\56"+
    "\1\5\3\0\2\57\2\60\1\61\1\62\1\60\3\0"+
    "\1\57\2\60\1\63\1\64\3\0\1\21\2\0\1\65"+
    "\2\0\1\66\7\0\1\67\2\0\1\70\1\0\1\71"+
    "\2\0\1\72\1\57\1\0\1\73\1\0\1\74\1\75"+
    "\1\36\1\76\1\77\3\0\7\5\2\3\1\100\3\5"+
    "\1\0\1\5\3\0\4\5\1\101\4\5\1\102\3\5"+
    "\1\103\5\5\1\104\13\5\1\105\14\5\1\106\12\0"+
    "\12\5\3\107\1\110\1\0\1\111\1\0\1\112\1\21"+
    "\1\0\1\113\1\0\1\113\1\0\1\114\1\115\1\36"+
    "\2\0\1\116\6\5\1\117\1\120\1\121\6\5\4\0"+
    "\1\122\5\5\1\123\11\5\1\124\2\5\1\125\1\5"+
    "\1\126\3\5\1\127\1\5\1\130\1\131\4\5\1\132"+
    "\10\5\12\0\13\5\1\110\1\0\1\36\1\133\1\0"+
    "\3\5\1\134\3\5\1\135\1\5\1\136\1\137\1\5"+
    "\1\140\2\141\3\0\3\5\1\142\10\5\1\143\1\5"+
    "\1\144\1\145\1\146\6\5\1\147\1\150\1\5\1\151"+
    "\1\152\1\5\1\153\3\5\1\154\10\0\1\155\1\0"+
    "\1\156\1\157\11\5\1\36\1\0\1\5\1\160\3\5"+
    "\1\161\3\5\3\0\1\162\13\5\1\163\1\164\1\165"+
    "\1\166\1\167\4\5\1\170\1\171\5\0\11\5\1\36"+
    "\1\1\1\172\4\5\1\173\1\174\1\5\2\175\1\0"+
    "\1\176\2\5\1\177\1\200\3\5\1\201\5\5\1\202"+
    "\3\0\3\5\1\203\5\5\1\36\1\0\3\5\1\204"+
    "\1\205\1\0\1\5\1\206\5\5\1\207\1\5\1\210"+
    "\1\211\1\5\1\0\1\212\3\5\1\213\3\5\1\36"+
    "\1\0\2\5\1\214\1\42\1\5\1\215\1\216\1\217"+
    "\3\5\1\220\1\0\2\5\1\221\1\222\2\5\1\36"+
    "\1\0\1\223\1\224\1\5\1\225\1\5\1\226\1\227"+
    "\3\5\1\230\1\36\1\0\5\5\1\0\1\231\1\232"+
    "\1\233\2\5\1\0\1\234\1\5\1\0\1\5\1\0"+
    "\1\235\14\0\1\236\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[735];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d"+
    "\0\u0a60\0\u0ab3\0\u0775\0\u0775\0\u0b06\0\u0b59\0\u0775\0\u0775"+
    "\0\u0775\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e"+
    "\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0775\0\u0f3d\0\u0f90\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b"+
    "\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0\0\u1513"+
    "\0\u1566\0\u15b9\0\u160c\0\u0775\0\u165f\0\u16b2\0\u1705\0\u1758"+
    "\0\u17ab\0\u0775\0\u0775\0\u17fe\0\u1851\0\u0775\0\u18a4\0\u18f7"+
    "\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u0775\0\u1a96\0\u1ae9\0\u1b3c"+
    "\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1ae9\0\u0775"+
    "\0\u1d81\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1ecd\0\u0775\0\u1f20"+
    "\0\u1f73\0\u0775\0\u1fc6\0\u2019\0\u0775\0\u0775\0\u206c\0\u20bf"+
    "\0\u0775\0\u2112\0\u0775\0\u2165\0\u0775\0\u21b8\0\u220b\0\u225e"+
    "\0\u22b1\0\u2304\0\u0775\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u0775"+
    "\0\u24a3\0\u067c\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695"+
    "\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u28da\0\u0775"+
    "\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u2b72"+
    "\0\u15b9\0\u2bc5\0\u0b59\0\u2c18\0\u0775\0\u2c6b\0\u2cbe\0\u2d11"+
    "\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u0a60\0\u2f03\0\u2f56"+
    "\0\u2fa9\0\u2ffc\0\u0a60\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u0a60"+
    "\0\u319b\0\u0a60\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d"+
    "\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625"+
    "\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd"+
    "\0\u3910\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55"+
    "\0\u160c\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a"+
    "\0\u3ded\0\u3e40\0\u0775\0\u3e93\0\u3ee6\0\u18a4\0\u3f39\0\u3f8c"+
    "\0\u3fdf\0\u3ee6\0\u0775\0\u0775\0\u0775\0\u3f39\0\u4032\0\u19f0"+
    "\0\u4085\0\u40d8\0\u4032\0\u4085\0\u0775\0\u0775\0\u412b\0\u417e"+
    "\0\u41d1\0\u4224\0\u4277\0\u1d81\0\u0775\0\u42ca\0\u1dd4\0\u0775"+
    "\0\u431d\0\u1e27\0\u1e7a\0\u4370\0\u43c3\0\u4416\0\u1f20\0\u0775"+
    "\0\u4469\0\u1f73\0\u0775\0\u44bc\0\u0775\0\u206c\0\u450f\0\u0775"+
    "\0\u4562\0\u45b5\0\u0775\0\u4608\0\u0775\0\u0775\0\u465b\0\u46ae"+
    "\0\u0775\0\u4701\0\u4754\0\u20bf\0\u47a7\0\u47fa\0\u484d\0\u48a0"+
    "\0\u48f3\0\u4946\0\u4999\0\u292d\0\u2980\0\u49ec\0\u4a3f\0\u4a92"+
    "\0\u4ae5\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a"+
    "\0\u4d7d\0\u4dd0\0\u0a60\0\u4e23\0\u4e76\0\u4ec9\0\u4f1c\0\u0a60"+
    "\0\u4f6f\0\u4fc2\0\u5015\0\u4f6f\0\u5068\0\u50bb\0\u510e\0\u5161"+
    "\0\u51b4\0\u0a60\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6"+
    "\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u0a60\0\u5598\0\u55eb"+
    "\0\u563e\0\u5691\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883"+
    "\0\u58d6\0\u5929\0\u0a60\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8"+
    "\0\u5b1b\0\u5b6e\0\u5bc1\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60"+
    "\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u0775"+
    "\0\u17fe\0\u194a\0\u5ff8\0\u604b\0\u0775\0\u609e\0\u0775\0\u60f1"+
    "\0\u6144\0\u0775\0\u6197\0\u1ecd\0\u61ea\0\u0775\0\u0775\0\u623d"+
    "\0\u6290\0\u62e3\0\u0a60\0\u6336\0\u6389\0\u63dc\0\u642f\0\u6482"+
    "\0\u64d5\0\u6528\0\u0a60\0\u0a60\0\u657b\0\u65ce\0\u6621\0\u6674"+
    "\0\u66c7\0\u671a\0\u676d\0\u67c0\0\u6813\0\u6866\0\u4c84\0\u68b9"+
    "\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u0a60\0\u6a58\0\u6aab\0\u6afe"+
    "\0\u6b51\0\u6ba4\0\u6bf7\0\u6c4a\0\u6c9d\0\u6cf0\0\u0a60\0\u6d43"+
    "\0\u6d96\0\u0a60\0\u6de9\0\u0a60\0\u6e3c\0\u6e8f\0\u6ee2\0\u0a60"+
    "\0\u6f35\0\u0a60\0\u0a60\0\u6f88\0\u6fdb\0\u702e\0\u7081\0\u0a60"+
    "\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220\0\u7273\0\u72c6\0\u7319"+
    "\0\u736c\0\u73bf\0\u7412\0\u7465\0\u74b8\0\u750b\0\u755e\0\u75b1"+
    "\0\u7604\0\u7657\0\u76aa\0\u76fd\0\u7750\0\u77a3\0\u77f6\0\u7849"+
    "\0\u789c\0\u78ef\0\u7942\0\u7995\0\u79e8\0\u0775\0\u7a3b\0\u7a8e"+
    "\0\u0775\0\u7ae1\0\u7b34\0\u7b87\0\u7bda\0\u0a60\0\u7c2d\0\u7c80"+
    "\0\u7cd3\0\u0a60\0\u7d26\0\u0a60\0\u7d79\0\u7dcc\0\u0a60\0\u0775"+
    "\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18\0\u7f6b\0\u7fbe\0\u8011\0\u0a60"+
    "\0\u8064\0\u80b7\0\u810a\0\u815d\0\u81b0\0\u8203\0\u8256\0\u82a9"+
    "\0\u0a60\0\u82fc\0\u0a60\0\u0a60\0\u0a60\0\u834f\0\u83a2\0\u83f5"+
    "\0\u8448\0\u849b\0\u84ee\0\u0a60\0\u0a60\0\u8541\0\u0a60\0\u0a60"+
    "\0\u8594\0\u0a60\0\u85e7\0\u863a\0\u868d\0\u0a60\0\u86e0\0\u8733"+
    "\0\u8786\0\u87d9\0\u882c\0\u887f\0\u88d2\0\u8925\0\u0775\0\u8978"+
    "\0\u89cb\0\u0a60\0\u8a1e\0\u8a71\0\u8ac4\0\u8b17\0\u8b6a\0\u8bbd"+
    "\0\u8c10\0\u8c63\0\u8cb6\0\u8d09\0\u8d5c\0\u8daf\0\u8e02\0\u8e55"+
    "\0\u8ea8\0\u8efb\0\u0a60\0\u8f4e\0\u8fa1\0\u8ff4\0\u9047\0\u909a"+
    "\0\u90ed\0\u0a60\0\u9140\0\u9193\0\u91e6\0\u9239\0\u928c\0\u92df"+
    "\0\u9332\0\u9385\0\u93d8\0\u942b\0\u947e\0\u0a60\0\u0a60\0\u0a60"+
    "\0\u0a60\0\u0a60\0\u94d1\0\u9524\0\u9577\0\u95ca\0\u0a60\0\u0a60"+
    "\0\u961d\0\u9670\0\u96c3\0\u9716\0\u9769\0\u97bc\0\u980f\0\u9862"+
    "\0\u98b5\0\u9908\0\u995b\0\u99ae\0\u9a01\0\u9a54\0\u9aa7\0\u9afa"+
    "\0\u0a60\0\u9b4d\0\u9ba0\0\u9bf3\0\u9c46\0\u0a60\0\u0a60\0\u9c99"+
    "\0\u0775\0\u9cec\0\u9d3f\0\u9d92\0\u9de5\0\u9e38\0\u0a60\0\u0a60"+
    "\0\u9e8b\0\u9ede\0\u9f31\0\u9f84\0\u9fd7\0\ua02a\0\ua07d\0\ua0d0"+
    "\0\ua123\0\u0a60\0\ua176\0\ua1c9\0\ua21c\0\ua26f\0\ua2c2\0\ua315"+
    "\0\u0a60\0\ua368\0\ua3bb\0\ua40e\0\ua461\0\ua4b4\0\ua507\0\ua55a"+
    "\0\ua5ad\0\ua600\0\ua653\0\u0a60\0\u0a60\0\ua6a6\0\ua6f9\0\u0a60"+
    "\0\ua74c\0\ua79f\0\ua7f2\0\ua845\0\ua898\0\u0a60\0\ua8eb\0\u0a60"+
    "\0\u0a60\0\ua93e\0\ua991\0\u0a60\0\ua9e4\0\uaa37\0\uaa8a\0\u0a60"+
    "\0\uaadd\0\uab30\0\uab83\0\uabd6\0\uac29\0\uac7c\0\uaccf\0\u0a60"+
    "\0\uad22\0\uad75\0\u0a60\0\u0a60\0\u0a60\0\uadc8\0\uae1b\0\uae6e"+
    "\0\u0a60\0\uaec1\0\uaf14\0\uaf67\0\u0a60\0\u0a60\0\uafba\0\ub00d"+
    "\0\ub060\0\ub0b3\0\u0a60\0\u0a60\0\ub106\0\u0a60\0\ub159\0\u0a60"+
    "\0\u0775\0\ub1ac\0\ub1ff\0\ub252\0\u0a60\0\uad22\0\ub2a5\0\ub2f8"+
    "\0\ub34b\0\ub39e\0\ub3f1\0\ub444\0\ub497\0\u0a60\0\u0a60\0\u0a60"+
    "\0\ub4ea\0\ub53d\0\ub590\0\u0a60\0\ub5e3\0\ub636\0\ub689\0\ub6dc"+
    "\0\u0a60\0\ub72f\0\ub782\0\ub7d5\0\ub828\0\ub87b\0\ub8ce\0\ub921"+
    "\0\ub974\0\ub9c7\0\uba1a\0\uba6d\0\ubac0\0\u0775\0\ubb13";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[735];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\26\1\27\67\26\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\31\2\41\1\30\2\42"+
    "\1\43\1\44\1\42\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\72\1\75\1\76\1\77\1\100"+
    "\1\71\1\101\1\70\1\102\1\103\1\104\1\73\1\33"+
    "\1\41\1\105\1\43\1\106\1\107\1\105\1\110\1\106"+
    "\1\75\1\77\1\102\1\111\1\41\1\112\1\113\1\114"+
    "\1\115\1\41\1\116\1\41\1\117\1\120\1\41\1\121"+
    "\1\41\1\122\1\43\1\123\22\124\1\125\1\126\1\127"+
    "\1\124\1\130\74\124\22\131\1\132\1\131\1\133\1\126"+
    "\1\134\74\131\4\135\1\136\21\135\1\137\77\135\1\140"+
    "\2\135\3\140\1\135\2\140\1\135\2\42\2\135\1\42"+
    "\22\135\25\140\1\135\12\140\3\135\4\140\1\141\4\140"+
    "\3\135\15\142\1\143\3\142\1\144\1\145\1\142\1\146"+
    "\1\142\1\147\74\142\3\150\1\151\2\150\3\151\1\150"+
    "\2\151\30\150\25\151\1\150\12\151\3\150\4\151\1\150"+
    "\4\151\3\150\3\30\1\152\2\30\3\152\1\30\2\152"+
    "\1\30\1\0\26\30\25\152\1\30\12\152\3\30\4\152"+
    "\1\30\4\152\3\30\3\153\1\154\2\153\3\154\2\153"+
    "\1\154\1\153\1\155\3\153\1\156\22\153\25\154\1\153"+
    "\12\154\3\153\4\154\1\153\4\154\3\153\3\157\1\160"+
    "\2\157\3\160\1\157\2\160\30\157\25\160\1\157\12\160"+
    "\3\157\4\160\1\157\4\160\3\157\3\30\1\161\2\30"+
    "\3\161\1\30\2\161\1\30\1\0\26\30\25\161\1\30"+
    "\12\161\3\30\4\161\1\30\4\161\3\30\3\162\1\163"+
    "\1\164\1\162\3\163\1\162\2\163\1\162\2\42\2\162"+
    "\1\42\22\162\25\163\1\162\12\163\3\162\4\163\1\162"+
    "\4\163\6\162\1\163\2\162\3\163\1\162\2\163\1\162"+
    "\2\42\2\162\1\42\22\162\25\163\1\162\12\163\1\162"+
    "\1\165\1\162\4\163\1\162\4\163\3\162\3\166\1\167"+
    "\2\166\3\167\1\166\2\167\1\166\2\42\2\166\1\42"+
    "\22\166\25\167\1\166\12\167\3\166\4\167\1\166\4\167"+
    "\3\166\1\30\1\170\1\171\1\41\1\30\1\172\3\41"+
    "\1\170\2\41\1\30\2\173\1\165\1\171\1\173\1\174"+
    "\1\171\1\173\2\171\6\30\1\171\5\30\1\171\25\41"+
    "\1\171\12\41\1\173\2\171\4\41\1\171\4\41\1\171"+
    "\1\175\1\173\34\176\1\177\66\176\34\200\1\201\66\200"+
    "\15\202\1\203\3\202\1\204\11\202\1\205\2\202\1\206"+
    "\4\202\1\207\57\202\15\210\2\211\2\210\1\211\101\210"+
    "\123\212\33\26\1\213\122\26\1\0\2\26\1\214\4\26"+
    "\1\215\5\26\1\0\1\26\1\0\4\26\1\216\1\0"+
    "\6\26\3\0\12\26\1\0\15\26\124\0\1\31\1\217"+
    "\1\220\1\0\1\31\3\0\1\31\54\0\1\220\35\0"+
    "\1\217\1\221\2\0\1\217\3\0\1\217\15\0\1\65"+
    "\74\0\1\41\1\0\1\41\1\0\1\41\1\222\6\41"+
    "\27\0\3\41\1\223\2\41\1\223\2\41\1\224\6\41"+
    "\1\225\3\41\1\226\1\0\2\41\1\226\3\41\1\224"+
    "\3\41\3\0\1\41\1\227\2\41\1\0\1\225\3\41"+
    "\7\0\1\65\22\0\1\65\1\230\73\0\1\31\1\217"+
    "\1\220\1\0\1\31\1\231\1\0\1\232\1\31\51\0"+
    "\1\232\2\0\1\220\35\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\1\67\11\41\1\67\12\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\233\1\41\1\234\2\41\1\235"+
    "\4\41\1\233\1\234\11\41\1\0\3\41\1\235\4\41"+
    "\1\236\1\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\6\0\1\46\7\0\1\237"+
    "\10\0\1\41\1\240\13\41\1\240\7\41\1\0\12\41"+
    "\1\241\2\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\20\0\2\42\2\0\1\42\104\0"+
    "\1\242\2\0\3\242\1\0\2\242\30\0\25\242\1\0"+
    "\12\242\3\0\4\242\1\0\4\242\3\0\22\243\1\244"+
    "\1\245\1\246\1\243\1\247\74\243\27\0\1\64\1\65"+
    "\121\0\1\65\1\64\121\0\1\65\1\0\1\65\120\0"+
    "\1\64\122\0\1\250\1\65\2\0\1\251\1\0\1\252"+
    "\114\0\1\65\4\0\1\64\115\0\1\65\4\0\1\253"+
    "\1\123\114\0\1\65\1\254\121\0\1\65\7\0\1\65"+
    "\112\0\1\65\10\0\1\65\111\0\1\65\123\0\1\255"+
    "\12\0\1\65\60\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\256\13\41\1\256\7\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\257"+
    "\1\0\10\41\27\0\22\41\1\257\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\3\41\1\260\4\41\27\0\1\41\1\261\1\41"+
    "\1\262\2\41\1\262\5\41\1\263\1\261\1\41\1\260"+
    "\5\41\1\0\1\41\1\263\10\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\264\1\0\10\41\27\0"+
    "\2\41\1\265\10\41\1\265\6\41\1\264\2\41\1\0"+
    "\10\41\1\266\1\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\267\1\0\10\41\27\0\1\270\4\41"+
    "\1\271\4\41\1\270\7\41\1\267\2\41\1\0\3\41"+
    "\1\271\6\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\272\5\41\27\0\3\41"+
    "\1\273\2\41\1\274\1\275\1\272\3\41\1\276\10\41"+
    "\1\0\1\41\1\276\10\41\3\0\1\41\1\277\2\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\300\13\41\1\300\7\41\1\0\11\41"+
    "\1\301\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\233\1\41\1\234\2\41"+
    "\1\235\3\41\1\302\1\233\1\234\11\41\1\0\3\41"+
    "\1\235\4\41\1\236\1\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\5\41"+
    "\1\303\17\41\1\0\3\41\1\303\6\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\256\13\41\1\256\1\41\1\304\5\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\305\1\0\10\41\27\0\7\41\1\306\12\41"+
    "\1\305\2\41\1\0\5\41\1\307\4\41\3\0\2\41"+
    "\1\310\1\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\311\10\41\1\312\1\311\12\41"+
    "\1\0\6\41\1\312\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\6\0\1\46"+
    "\7\0\1\237\10\0\1\41\1\240\10\41\1\313\2\41"+
    "\1\240\7\41\1\0\12\41\1\241\2\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\314\7\41\1\315\1\314\11\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\316\1\41\1\317\6\41\1\320"+
    "\1\316\1\317\11\41\1\0\6\41\1\320\3\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\1\41\1\321\1\322\10\41\1\322\1\41"+
    "\1\321\7\41\1\0\10\41\1\323\1\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\305\1\0\10\41"+
    "\27\0\7\41\1\307\12\41\1\305\2\41\1\0\5\41"+
    "\1\307\4\41\3\0\2\41\1\310\1\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\2\41\1\272\5\41"+
    "\27\0\3\41\1\273\2\41\1\273\1\41\1\272\3\41"+
    "\1\276\10\41\1\0\1\41\1\276\10\41\3\0\1\41"+
    "\1\277\2\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\3\41\1\324\2\41\1\324\5\41"+
    "\1\325\10\41\1\0\1\41\1\325\10\41\3\0\4\41"+
    "\1\0\4\41\3\0\24\241\1\326\57\241\1\245\16\241"+
    "\7\0\1\327\1\330\5\0\1\331\25\0\1\332\1\333"+
    "\1\334\1\0\1\335\1\336\2\0\1\327\1\0\1\332"+
    "\1\334\1\337\1\333\1\0\1\330\1\0\1\335\5\0"+
    "\1\337\1\0\1\336\4\0\1\340\21\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\341\17\41\1\0"+
    "\3\41\1\341\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\25\41\1\0"+
    "\11\41\1\342\3\0\4\41\1\0\4\41\116\0\1\343"+
    "\10\0\1\41\1\0\1\41\1\0\10\41\27\0\2\41"+
    "\1\314\10\41\1\314\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\344\1\41\3\0\22\124\1\345\1\0\1\346\1\124"+
    "\1\347\77\124\1\350\2\124\3\350\1\124\1\351\1\350"+
    "\6\124\1\352\1\353\1\346\1\124\1\354\15\124\25\350"+
    "\1\124\12\350\3\124\4\350\1\124\4\350\150\124\1\355"+
    "\1\353\1\346\1\124\1\356\74\124\22\131\1\357\1\131"+
    "\1\360\1\0\1\361\77\131\1\350\2\131\3\350\1\131"+
    "\1\362\1\350\6\131\1\363\1\131\1\360\1\353\1\354"+
    "\15\131\25\350\1\131\12\350\3\131\4\350\1\131\4\350"+
    "\150\131\1\355\1\131\1\360\1\353\1\364\74\131\30\0"+
    "\1\365\114\0\1\355\101\0\1\140\1\0\1\140\1\0"+
    "\10\140\27\0\25\140\1\0\12\140\3\0\4\140\1\0"+
    "\4\140\116\0\1\366\7\0\15\142\1\0\3\142\1\0"+
    "\1\367\1\142\1\370\1\142\1\371\77\142\1\372\2\142"+
    "\3\372\1\142\2\372\1\142\1\0\3\142\1\0\1\367"+
    "\1\142\1\370\1\142\1\371\15\142\25\372\1\142\12\372"+
    "\3\142\4\372\1\142\4\372\6\142\1\372\2\142\3\372"+
    "\1\142\2\372\1\142\1\373\3\142\1\0\1\367\1\142"+
    "\1\370\1\142\1\371\15\142\25\372\1\142\12\372\3\142"+
    "\4\372\1\142\4\372\3\142\3\0\1\350\2\0\3\350"+
    "\1\0\2\350\12\0\1\354\15\0\25\350\1\0\12\350"+
    "\3\0\4\350\1\0\4\350\3\0\123\142\1\0\1\374"+
    "\1\0\1\374\1\0\10\374\1\375\2\0\1\376\1\375"+
    "\22\0\25\374\1\0\12\374\3\0\4\374\1\0\4\374"+
    "\4\0\1\377\1\0\1\377\1\0\10\377\1\u0100\2\0"+
    "\1\u0101\1\u0100\22\0\25\377\1\0\12\377\3\0\4\377"+
    "\1\0\4\377\3\0\15\u0102\1\155\3\u0102\1\155\102\u0102"+
    "\1\u0103\1\u0102\1\u0103\1\u0102\5\u0103\1\u0102\1\u0103\1\u0102"+
    "\1\0\2\u0102\1\u0104\1\0\22\u0102\25\u0103\1\u0102\12\u0103"+
    "\3\u0102\4\u0103\1\u0102\4\u0103\6\u0102\1\u0105\2\u0102\3\u0105"+
    "\1\u0102\1\u0106\1\u0105\1\u0102\1\155\3\u0102\1\155\22\u0102"+
    "\25\u0105\1\u0102\12\u0105\3\u0102\4\u0105\1\u0102\4\u0105\3\u0102"+
    "\1\0\1\u0107\1\0\1\u0107\1\0\10\u0107\1\u0108\2\0"+
    "\1\u0109\1\u0108\22\0\25\u0107\1\0\12\u0107\3\0\4\u0107"+
    "\1\0\4\u0107\4\0\1\u010a\1\0\1\u010a\1\0\10\u010a"+
    "\1\u010b\2\0\1\u010c\1\u010b\22\0\25\u010a\1\0\12\u010a"+
    "\3\0\4\u010a\1\0\4\u010a\4\0\1\163\1\0\1\163"+
    "\1\0\10\163\27\0\25\163\1\0\12\163\3\0\4\163"+
    "\1\0\4\163\33\0\1\u010d\73\0\1\u010e\1\0\1\u010e"+
    "\1\0\10\u010e\2\u010f\2\0\1\u010f\5\0\1\u0110\14\0"+
    "\25\u010e\1\0\12\u010e\3\0\4\u010e\1\0\4\u010e\4\0"+
    "\1\170\3\0\1\170\3\0\1\170\112\0\1\170\3\0"+
    "\1\170\1\231\2\0\1\170\114\0\1\u0111\2\0\3\u0111"+
    "\1\0\2\u0111\30\0\25\u0111\1\0\12\u0111\3\0\4\u0111"+
    "\1\0\4\u0111\3\0\34\176\1\u0112\122\176\1\u0112\1\u0113"+
    "\65\176\34\200\1\u0114\122\200\1\u0114\1\u0115\65\200\15\202"+
    "\1\203\3\202\1\203\14\202\1\203\4\202\1\203\57\202"+
    "\15\0\1\u0116\105\0\15\202\1\203\3\202\1\203\13\202"+
    "\1\u0117\1\203\4\202\1\203\57\202\30\0\1\u0118\122\0"+
    "\1\255\107\0\2\211\2\0\1\211\101\0\33\26\1\0"+
    "\2\26\1\0\4\26\1\0\5\26\1\0\1\26\1\0"+
    "\4\26\2\0\6\26\3\0\12\26\1\0\15\26\27\0"+
    "\1\u0119\122\0\1\u0119\42\0\1\u011a\3\0\1\u011a\114\0"+
    "\1\u011b\3\0\1\u011b\27\0\1\217\1\0\1\220\1\0"+
    "\1\217\3\0\1\217\54\0\1\220\35\0\1\170\2\0"+
    "\1\u011c\1\170\3\0\1\170\17\0\1\u011c\73\0\1\65"+
    "\121\0\1\41\1\0\1\41\1\0\10\41\27\0\5\41"+
    "\1\u011d\1\41\1\u011e\15\41\1\0\3\41\1\u011d\1\41"+
    "\1\u011e\4\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\4\41\1\u011f\14\41"+
    "\1\u011f\3\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\14\41"+
    "\1\u0120\10\41\1\0\1\41\1\u0120\10\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u0121\10\41\1\u0121\11\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\11\41\1\u0122\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\25\41\1\0\1\u0123\3\41\1\u0123\5\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\u0124\1\0\1\u0124"+
    "\1\0\1\u0124\1\0\3\u0124\34\0\1\u0124\1\0\1\u0124"+
    "\3\0\1\u0124\2\0\1\u0124\3\0\1\u0124\1\0\2\u0124"+
    "\1\0\1\u0124\3\0\1\u0124\33\0\1\u0125\3\0\1\u0125"+
    "\112\0\1\41\1\0\1\41\1\0\10\41\27\0\1\41"+
    "\1\u0126\13\41\1\u0126\7\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u0127\13\41\1\0\6\41\1\u0127\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\3\41\1\u0128\2\41\1\u0128\16\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\3\41\1\u0129\2\41"+
    "\1\u0129\16\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\36\0\1\u012a\70\0\1\41\1\0\1\u012b\1\0\10\41"+
    "\27\0\22\41\1\u012b\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\242\1\0\1\242\1\0\10\242"+
    "\27\0\25\242\1\0\12\242\3\0\4\242\1\0\4\242"+
    "\3\0\3\243\1\0\2\243\3\0\2\243\1\0\6\243"+
    "\1\244\1\245\1\246\1\243\1\0\15\243\25\0\1\243"+
    "\12\0\3\243\4\0\1\243\4\0\150\243\1\0\1\245"+
    "\1\246\1\243\1\247\74\243\30\0\1\65\121\0\1\65"+
    "\3\0\1\u012c\147\0\1\u012d\12\0\1\u012d\63\0\1\u012e"+
    "\103\0\2\254\2\0\1\254\116\0\2\255\2\0\1\255"+
    "\102\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u012f\15\41\1\0\5\41\1\u012f\4\41\3\0\4\41"+
    "\1\0\3\41\1\u0130\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\14\41\1\u0131\10\41\1\0\1\41\1\u0131"+
    "\10\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\41\1\u0132\13\41\1\u0132"+
    "\7\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\4\41\1\256"+
    "\14\41\1\256\3\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\25\41\1\0\12\41\3\0\2\41\1\u0133\1\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\25\41\1\0\12\41\3\0\1\41\1\u0134\2\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\11\41\1\u0135\13\41\1\0\6\41\1\u0135\3\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\2\41\1\u0136\5\41\27\0\10\41\1\u0136\13\41\1\u0137"+
    "\1\0\2\41\1\u0137\7\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u0138\1\0\10\41\27\0\22\41"+
    "\1\u0138\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u0139\4\41\1\u013a\7\41\1\u013b\1\0\1\41\1\u013a"+
    "\1\u013b\2\41\1\u0139\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u013c\4\41\1\u013a\7\41\1\u013b\1\0\1\41\1\u013a"+
    "\1\u013b\2\41\1\u0139\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\22\41"+
    "\1\u013d\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\14\41"+
    "\1\u013e\10\41\1\0\1\41\1\u013e\10\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\1\u013f\3\41\1\u013f\5\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\2\41\1\u0140\10\41\1\u0140\11\41\1\0"+
    "\10\41\1\u0141\1\41\3\0\1\u0142\3\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\41"+
    "\1\u0143\13\41\1\u0143\7\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\12\41\1\u0144\12\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\14\41\1\u0145\10\41\1\0\1\41\1\u0145\10\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\23\41\1\u0146\1\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\11\41\1\u0147\13\41\1\0\6\41"+
    "\1\u0147\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\2\41\1\u0148\10\41"+
    "\1\u0148\1\41\1\u0149\7\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u0148\10\41\1\u0148\11\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u014a\17\41\1\0\3\41"+
    "\1\u014a\6\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u014b\15\41"+
    "\1\0\5\41\1\u014b\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\u014c"+
    "\11\41\1\u014c\12\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\12\41\1\u014d\12\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\41\1\u014e\13\41\1\u014e\7\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u014f\17\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\3\41\1\u0150\2\41\1\u0150\16\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u0151\1\41\1\u0152"+
    "\2\41\1\u0153\10\41\1\0\1\41\1\u0153\3\41\1\u0151"+
    "\1\u0152\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\1\u0154\1\41\1\u0155"+
    "\7\41\1\u0154\1\u0155\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\u0156\4\41\1\u0157\4\41\1\u0156\12\41\1\0"+
    "\3\41\1\u0157\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\41\1\u0158"+
    "\13\41\1\u0158\7\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\3\41\1\u0159"+
    "\4\41\27\0\17\41\1\u0159\5\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\14\41\1\u015a\10\41\1\0\1\41\1\u015a"+
    "\10\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u015b\1\0\10\41\27\0\22\41\1\u015b\2\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\3\0\123\241\55\0"+
    "\1\u015c\22\0\1\u015c\66\0\1\u015d\4\0\1\u015e\4\0"+
    "\1\u015d\16\0\1\u015e\35\0\1\u015f\52\0\1\u015f\42\0"+
    "\1\u0160\62\0\1\u0160\101\0\1\u0161\13\0\1\u0161\105\0"+
    "\1\u0162\11\0\1\u0162\113\0\1\u0163\2\0\1\u0163\123\0"+
    "\1\u0164\23\0\1\u0164\72\0\1\u0165\2\0\1\u0165\51\0"+
    "\1\41\1\0\1\u0166\1\0\10\41\27\0\22\41\1\u0166"+
    "\2\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\5\41\1\u0167"+
    "\17\41\1\0\3\41\1\u0167\6\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\2\41\1\u0168"+
    "\5\41\27\0\3\41\1\u0169\1\u016a\1\41\1\u0169\1\u016b"+
    "\1\u0168\1\u016c\7\41\1\u016a\2\41\1\u016d\1\0\2\41"+
    "\1\u016d\2\41\1\u016b\1\u016c\2\41\1\u016e\3\0\1\41"+
    "\1\u016f\2\41\1\0\4\41\3\0\3\124\1\0\2\124"+
    "\3\0\2\124\1\0\6\124\1\352\1\353\1\346\1\124"+
    "\1\0\15\124\25\0\1\124\12\0\3\124\4\0\1\124"+
    "\4\0\25\124\1\0\1\353\1\346\1\124\1\356\74\124"+
    "\1\0\1\350\1\0\1\350\1\0\10\350\27\0\25\350"+
    "\1\0\12\350\3\0\4\350\1\0\4\350\1\0\1\u0170"+
    "\1\0\1\124\1\351\1\124\1\351\1\124\10\351\5\124"+
    "\1\345\1\0\1\346\1\124\1\347\15\124\25\351\1\124"+
    "\12\351\3\124\4\351\1\124\4\351\1\124\1\u0171\1\124"+
    "\3\131\1\0\2\131\3\0\2\131\1\0\6\131\1\363"+
    "\1\131\1\360\1\353\1\0\15\131\25\0\1\131\12\0"+
    "\3\131\4\0\1\131\4\0\25\131\1\0\1\131\1\360"+
    "\1\353\1\364\75\131\1\362\1\131\1\362\1\131\10\362"+
    "\5\131\1\357\1\131\1\360\1\0\1\361\15\131\25\362"+
    "\1\131\12\362\3\131\4\362\1\131\4\362\1\131\1\u0172"+
    "\1\131\3\142\1\u0173\2\142\3\u0173\2\142\1\u0173\1\142"+
    "\1\0\3\142\1\0\1\u0174\1\142\1\370\1\142\1\u0175"+
    "\15\142\25\u0173\1\142\12\u0173\3\142\4\u0173\1\142\4\u0173"+
    "\20\142\1\0\3\142\1\0\116\142\1\0\3\142\1\0"+
    "\1\u0175\1\142\1\370\1\142\1\u0176\75\142\1\372\1\142"+
    "\1\372\1\142\10\372\1\u0177\2\142\1\u0178\1\u0177\1\367"+
    "\1\142\1\370\1\142\1\371\15\142\25\372\1\142\12\372"+
    "\3\142\4\372\1\142\4\372\3\142\3\0\1\u0179\2\0"+
    "\3\u0179\1\0\2\u0179\30\0\25\u0179\1\0\12\u0179\3\0"+
    "\4\u0179\1\0\4\u0179\20\0\1\375\3\0\1\375\116\0"+
    "\1\u0100\3\0\1\u0100\101\0\15\u0102\1\0\3\u0102\1\0"+
    "\102\u0102\1\u0105\1\u0102\1\u0105\1\u0102\5\u0105\1\u0106\1\u0105"+
    "\1\u0106\1\u017a\2\u0102\1\u017b\1\u017a\22\u0102\25\u0105\1\u0102"+
    "\12\u0105\3\u0102\4\u0105\1\u0102\4\u0105\4\u0102\1\u0106\1\u0102"+
    "\1\u0106\1\u0102\10\u0106\1\u017c\2\u0102\1\u017d\1\u017c\22\u0102"+
    "\25\u0106\1\u0102\12\u0106\3\u0102\4\u0106\1\u0102\4\u0106\3\u0102"+
    "\15\0\1\u0108\3\0\1\u0108\116\0\1\u010b\3\0\1\u010b"+
    "\116\0\2\u010f\2\0\1\u010f\5\0\1\u0110\74\0\1\u0111"+
    "\1\0\1\u0111\1\0\10\u0111\27\0\25\u0111\1\0\12\u0111"+
    "\3\0\4\u0111\1\0\4\u0111\3\0\34\176\1\u0112\1\u017e"+
    "\65\176\34\200\1\u0114\1\u017f\65\200\15\202\1\203\3\202"+
    "\1\203\14\202\1\203\4\202\1\203\14\202\1\u0180\12\202"+
    "\1\u0180\27\202\15\0\2\u0118\2\0\1\u0118\204\0\1\u0181"+
    "\64\0\1\u0182\13\0\1\u0182\42\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\7\41\1\u0183\15\41\1\0\5\41"+
    "\1\u0183\4\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0184\1\0\10\41\27\0\22\41\1\u0184\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\u0185\5\41\27\0\4\41"+
    "\1\u0186\1\u0187\2\41\1\u0185\3\41\1\u0188\4\41\1\u0186"+
    "\3\41\1\0\1\41\1\u0188\1\41\1\u0187\6\41\3\0"+
    "\2\41\1\u0189\1\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u018a\1\0\10\41\27\0\22\41\1\u018a\2\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\11\41\1\u018b\13\41\1\0"+
    "\6\41\1\u018b\3\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\u018c\11\41"+
    "\1\u018c\12\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u018d\15\41\1\0\5\41\1\u018d\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u018e\1\0\10\41"+
    "\27\0\22\41\1\u018e\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\14\41\1\u018f\10\41\1\0\1\41\1\u018f\10\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\u0190\10\41\1\u0190\11\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\u0191\1\0"+
    "\2\41\1\u0191\7\41\3\0\4\41\1\0\4\41\36\0"+
    "\1\u012c\70\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\u0192\10\41\1\u0192\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\6\0\1\u0193\2\0\3\u0193\1\0"+
    "\2\u0193\2\0\1\u012c\4\0\1\u0194\20\0\25\u0193\1\0"+
    "\12\u0193\1\u0195\2\0\4\u0193\1\0\4\u0193\73\0\1\u0196"+
    "\3\0\1\u0196\43\0\2\u0197\2\0\1\u0197\102\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\10\41"+
    "\1\u0198\1\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\10\41"+
    "\1\u0199\1\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u019a\15\41"+
    "\1\0\5\41\1\u019a\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\2\41"+
    "\1\u019b\10\41\1\u019b\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u019c\1\0\10\41"+
    "\27\0\22\41\1\u019c\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u019d\13\41\1\0\6\41\1\u019d\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\u019e\10\41\1\u019e\11\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u019f\13\41"+
    "\1\0\6\41\1\u019f\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u01a0\1\0\10\41\27\0\22\41"+
    "\1\u01a0\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u01a1\15\41\1\0\5\41\1\u01a1\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u01a2\13\41\1\0\6\41\1\u01a2\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\15\41\1\u01a3\7\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u01a4"+
    "\1\0\10\41\27\0\22\41\1\u01a4\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\11\41\1\u01a5\13\41\1\0\6\41"+
    "\1\u01a5\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\5\41\1\u01a6\17\41"+
    "\1\0\3\41\1\u01a6\6\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u01a7\1\0\10\41\27\0\22\41"+
    "\1\u01a7\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\u01a8"+
    "\11\41\1\u01a8\12\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\13\41\1\u01a9\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u01aa\15\41\1\0\5\41\1\u01aa\4\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\22\41\1\u01ab\2\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\2\41\1\u01ac\5\41\27\0\10\41\1\u01ac\14\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u01ad\15\41\1\0"+
    "\5\41\1\u01ad\4\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\5\41\1\u01ae"+
    "\17\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u01af"+
    "\15\41\1\0\5\41\1\u01af\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\u01b0\11\41\1\u01b0\12\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\3\41"+
    "\1\u01b1\4\41\27\0\17\41\1\u01b1\5\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\11\41\1\u01b2\13\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\21\41\1\u01b3\3\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\7\41\1\u01b4\4\41\1\u01b5\10\41"+
    "\1\0\1\41\1\u01b5\3\41\1\u01b4\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\u01b6\1\0\2\41\1\u01b6\7\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\11\41\1\u01b7\13\41\1\0\6\41\1\u01b7"+
    "\3\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u01b8\1\0\10\41\27\0\22\41\1\u01b8\2\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\3\41\1\u01b9\2\41\1\u01b9"+
    "\16\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\14\41\1\u01ba"+
    "\10\41\1\0\1\41\1\u01ba\10\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u01bb\15\41\1\0\5\41\1\u01bb\4\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\3\41\1\u01bc\2\41\1\u01bc\11\41\1\u01bd"+
    "\4\41\1\0\12\41\3\0\4\41\1\0\1\u01bd\3\41"+
    "\4\0\1\41\1\0\1\u01be\1\0\10\41\27\0\22\41"+
    "\1\u01be\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u01bf\13\41\1\0\6\41\1\u01bf\3\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u01c0\1\0\10\41"+
    "\27\0\22\41\1\u01c0\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\47\0\1\u01c1\11\0\1\u01c1\110\0\1\u01c2"+
    "\11\0\1\u01c2\113\0\1\u01c3\2\0\1\u01c3\137\0\1\u01c4"+
    "\25\0\1\u01c4\53\0\1\u01c5\10\0\1\u01c5\110\0\1\u01c6"+
    "\13\0\1\u01c6\143\0\1\u01c7\73\0\1\u01c8\23\0\1\u01c8"+
    "\70\0\1\u01c9\13\0\1\u01c9\121\0\1\u01ca\12\0\1\u01ca"+
    "\30\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u01cb\13\41\1\0\6\41\1\u01cb\3\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u01cc\13\41\1\0\6\41\1\u01cc\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u01cd\17\41\1\0\3\41"+
    "\1\u01cd\4\41\1\u01ce\1\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\2\41"+
    "\1\u01cf\10\41\1\u01cf\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\5\41\1\u01d0\17\41\1\0\3\41\1\u01d0\6\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\41\1\u01d1\13\41\1\u01d1\7\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\5\41\1\u01d2\17\41"+
    "\1\0\3\41\1\u01d2\6\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u01d3\13\41\1\0\6\41\1\u01d3\3\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u01d4\10\41\1\u01d4\11\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u01d5"+
    "\1\0\10\41\27\0\22\41\1\u01d5\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\u0173\1\0\1\u0173"+
    "\1\0\10\u0173\27\0\25\u0173\1\0\12\u0173\3\0\4\u0173"+
    "\1\0\4\u0173\1\0\1\u01d6\1\0\3\142\1\0\2\142"+
    "\3\0\2\142\1\0\1\142\1\0\3\142\1\0\1\u0174"+
    "\1\142\1\370\1\142\1\0\15\142\25\0\1\142\12\0"+
    "\3\142\4\0\1\142\4\0\20\142\1\0\3\142\2\0"+
    "\1\142\1\370\1\142\1\u0176\111\142\1\u0177\3\142\1\u0177"+
    "\1\367\1\142\1\370\1\142\1\371\74\142\1\0\1\u0179"+
    "\1\0\1\u0179\1\0\10\u0179\1\u0177\2\0\1\u01d7\1\u0177"+
    "\22\0\25\u0179\1\0\12\u0179\3\0\4\u0179\1\0\4\u0179"+
    "\3\0\15\u0102\1\u017a\3\u0102\1\u017a\116\u0102\1\u017c\3\u0102"+
    "\1\u017c\101\u0102\15\202\1\203\3\202\1\203\14\202\1\203"+
    "\4\202\1\203\24\202\1\u01d8\3\202\1\u01d8\26\202\72\0"+
    "\1\u01d9\3\0\1\u01d9\75\0\1\u01da\23\0\1\u01da\26\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\3\41\1\u01db"+
    "\2\41\1\u01db\16\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\u01dc\11\41\1\u01dc\12\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u01dd\1\0\10\41"+
    "\27\0\22\41\1\u01dd\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\2\41"+
    "\1\u01de\5\41\27\0\10\41\1\u01de\14\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\12\41\3\0\2\41"+
    "\1\u01df\1\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\11\41\1\u01e0\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u01e1\17\41\1\0\3\41\1\u01e1"+
    "\6\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\12\41\3\0"+
    "\1\u01e2\3\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\u01e3\10\41\1\u01e3\11\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u01e4\1\0\10\41\27\0\22\41\1\u01e4\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u01e5\13\41"+
    "\1\0\6\41\1\u01e5\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u01e6\15\41\1\0\5\41\1\u01e6\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\12\41\3\0\3\41\1\u01e7\1\0"+
    "\4\41\4\0\1\u0193\1\0\1\u0193\1\0\10\u0193\1\u01e8"+
    "\3\0\1\u01e9\22\0\25\u0193\1\0\12\u0193\3\0\4\u0193"+
    "\1\0\4\u0193\6\0\1\u01ea\2\0\3\u01ea\1\0\2\u01ea"+
    "\30\0\25\u01ea\1\0\12\u01ea\3\0\4\u01ea\1\0\4\u01ea"+
    "\6\0\1\u01eb\2\0\3\u01eb\1\0\2\u01eb\30\0\25\u01eb"+
    "\1\0\12\u01eb\3\0\4\u01eb\1\0\4\u01eb\50\0\1\u01ec"+
    "\13\0\1\u01ec\42\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u01ed\13\41\1\u01ed\7\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u01ee\17\41\1\0\3\41"+
    "\1\u01ee\6\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\1\41\1\u01ef\13\41"+
    "\1\u01ef\7\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\1\u01f0\3\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\14\41\1\u01f1"+
    "\10\41\1\0\1\41\1\u01f1\10\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\25\41\1\0\10\41\1\u01f2\1\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\u01f3\10\41\1\u01f3\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\1\41\1\u01f4\13\41\1\u01f4\7\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u01f5\1\0\10\41\27\0\2\41\1\u01f6\10\41\1\u01f6"+
    "\6\41\1\u01f5\2\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\25\41\1\0\10\41\1\u01f7\1\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\13\41\1\u01f8\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u01f9\15\41\1\0\5\41\1\u01f9\4\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u01fa\1\0"+
    "\10\41\27\0\22\41\1\u01fa\2\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\7\41\1\u01fb\15\41\1\0\5\41\1\u01fb"+
    "\4\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\12\41\3\0"+
    "\2\41\1\u01fc\1\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u01fd\15\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\u01fe\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u01ff\17\41\1\0\3\41"+
    "\1\u01ff\6\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\6\41\1\u0200\16\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\u0201\1\0"+
    "\2\41\1\u0201\7\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u0202"+
    "\10\41\1\u0202\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\5\41\1\u0203\17\41\1\0\3\41\1\u0203\6\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\7\41\1\u0204\15\41\1\0\5\41\1\u0204"+
    "\4\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\11\41\1\u0205"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\u0206\10\41\1\u0206\11\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0207\1\0\10\41\27\0\22\41\1\u0207\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\14\41\1\u0208\10\41"+
    "\1\0\1\41\1\u0208\10\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u0209\1\0\10\41\27\0\22\41"+
    "\1\u0209\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u020a\15\41\1\0\5\41\1\u020a\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u020b\10\41\1\u020b\11\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\3\41\1\u020c\2\41\1\u020c\16\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\5\41\1\u020d\17\41"+
    "\1\0\3\41\1\u020d\6\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u020e\15\41\1\0\5\41\1\u020e\4\41\3\0\4\41"+
    "\1\0\4\41\51\0\1\u020f\10\0\1\u020f\120\0\1\u0210"+
    "\22\0\1\u0210\70\0\1\u0211\10\0\1\u0211\46\0\1\u0212"+
    "\62\0\1\u0212\111\0\1\u0213\22\0\1\u0213\70\0\1\u0214"+
    "\10\0\1\u0214\53\0\1\u0215\52\0\1\u0215\42\0\1\u0216"+
    "\12\0\1\u0213\47\0\1\u0216\2\0\1\u0217\102\0\1\u0218"+
    "\23\0\1\u0218\30\0\1\u020f\62\0\1\u020f\35\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\4\41\1\u0219\14\41"+
    "\1\u0219\3\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u021a\1\0\10\41\27\0\22\41"+
    "\1\u021a\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u021b\13\41\1\0\6\41\1\u021b\3\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\3\41\1\u021c\2\41\1\u021c\16\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\12\41\3\0\1\41"+
    "\1\u021d\2\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\41\1\u021e\13\41\1\u021e\7\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\2\41\1\u021f\10\41"+
    "\1\u021f\11\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\3\41"+
    "\1\u0220\2\41\1\u0220\16\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u0221\10\41\1\u0221\11\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\11\41\1\u0222\13\41\1\0\6\41"+
    "\1\u0222\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u0223\15\41"+
    "\1\0\5\41\1\u0223\4\41\3\0\4\41\1\0\4\41"+
    "\20\0\1\u0177\3\0\1\u0177\101\0\15\202\1\203\3\202"+
    "\1\203\14\202\1\203\4\202\1\203\1\202\1\u0224\13\202"+
    "\1\u0224\41\202\72\0\1\u0225\3\0\1\u0225\25\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\4\41\1\u0226\14\41"+
    "\1\u0226\3\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\41"+
    "\1\u0227\13\41\1\u0227\7\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\u0228\1\0\2\41\1\u0228\7\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u0229\17\41\1\0\3\41\1\u0229"+
    "\6\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\u022a\17\41\1\0"+
    "\3\41\1\u022a\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\2\41\1\u022b\5\41\27\0"+
    "\10\41\1\u022b\14\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\u022c\1\0\2\41\1\u022c\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u022d\13\41\1\0\6\41\1\u022d\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u022e\17\41\1\0\3\41"+
    "\1\u022e\6\41\3\0\4\41\1\0\4\41\20\0\1\u01e8"+
    "\106\0\1\u01ea\1\0\1\u01ea\1\0\10\u01ea\6\0\1\u022f"+
    "\20\0\25\u01ea\1\0\12\u01ea\3\0\4\u01ea\1\0\4\u01ea"+
    "\4\0\1\u01eb\1\0\1\u01eb\1\0\10\u01eb\27\0\25\u01eb"+
    "\1\0\12\u01eb\1\u0230\2\0\4\u01eb\1\0\4\u01eb\54\0"+
    "\1\u0231\23\0\1\u0231\26\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\3\41\1\u0232\2\41\1\u0232\16\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\41\1\u0233\13\41\1\u0233"+
    "\7\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u0234"+
    "\10\41\1\u0234\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\25\41\1\0\1\u0235\3\41\1\u0235\5\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u0236\13\41\1\0\6\41\1\u0236\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\41\1\u0237\13\41\1\u0237\7\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\u0238\5\41\27\0\10\41"+
    "\1\u0238\14\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\2\41"+
    "\1\u0239\10\41\1\u0239\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\3\41\1\u023a\2\41\1\u023a\16\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\4\41\1\u023b\14\41\1\u023b\3\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\17\41\1\u023c\5\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\12\41"+
    "\3\0\1\41\1\u023d\2\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u023e\15\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\u023f\1\0"+
    "\2\41\1\u023f\7\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\16\41\1\u0240"+
    "\6\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\25\41\1\0"+
    "\11\41\1\u0241\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u0242\13\41"+
    "\1\0\6\41\1\u0242\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\3\41"+
    "\1\u0243\2\41\1\u0243\16\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\3\41"+
    "\1\u0244\4\41\27\0\17\41\1\u0244\5\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\u0245\1\0\2\41\1\u0245"+
    "\7\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u0246\15\41\1\0"+
    "\5\41\1\u0246\4\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u0247"+
    "\15\41\1\0\5\41\1\u0247\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\u0248\1\0\2\41\1\u0248\7\41\3\0\4\41"+
    "\1\0\4\41\56\0\1\u0213\23\0\1\u0213\26\0\1\u0249"+
    "\12\0\1\u0213\47\0\1\u0249\2\0\1\u0217\76\0\1\u0214"+
    "\13\0\1\u0214\131\0\1\u020f\3\0\1\u020f\44\0\1\u0213"+
    "\52\0\1\u0217\140\0\1\u0213\70\0\1\u024a\22\0\1\u024a"+
    "\104\0\1\u024b\16\0\1\u024b\70\0\1\u024c\2\0\1\u024c"+
    "\51\0\1\41\1\0\1\41\1\0\10\41\2\u024d\2\0"+
    "\1\u024d\22\0\25\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u024e\1\0\10\41\27\0"+
    "\22\41\1\u024e\2\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\u024f\1\0\2\41\1\u024f\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u0250\1\0\10\41"+
    "\27\0\22\41\1\u0250\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u0251\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\5\41\1\u0252\17\41\1\0\3\41\1\u0252\6\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u0253"+
    "\1\0\10\41\27\0\22\41\1\u0253\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\14\41\1\u0254\10\41\1\0\1\41"+
    "\1\u0254\10\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u0255\15\41"+
    "\1\0\5\41\1\u0255\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\11\41\1\u0256\3\0\4\41\1\0\4\41\3\0"+
    "\15\202\1\203\3\202\1\203\14\202\1\203\4\202\1\203"+
    "\5\202\1\u0257\23\202\1\u0257\25\202\53\0\1\u0258\23\0"+
    "\1\u0258\24\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\14\41\1\u0259\10\41\1\0\1\41\1\u0259\10\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u025a\1\0"+
    "\10\41\27\0\22\41\1\u025a\2\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\11\41\1\u025b\13\41\1\0\6\41\1\u025b"+
    "\3\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u025c\15\41\1\0"+
    "\5\41\1\u025c\4\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\11\41\1\u025d"+
    "\13\41\1\0\6\41\1\u025d\3\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\25\41\1\0\11\41\1\u025e\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\1\u025f\3\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\u0260\11\41"+
    "\1\u0260\12\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\20\0\1\u01e8\3\0\1\u01e9\116\0\1\u0261\3\0\1\u0262"+
    "\173\0\1\u0263\3\0\1\u0263\25\0\1\41\1\0\1\u0264"+
    "\1\0\10\41\27\0\22\41\1\u0264\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\u0265\1\0\2\41\1\u0265"+
    "\7\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u0266\10\41\1\u0266"+
    "\11\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u0267"+
    "\15\41\1\0\5\41\1\u0267\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0268\1\0\10\41\27\0"+
    "\22\41\1\u0268\2\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\u0269\10\41\1\u0269\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\4\41\1\u026a\14\41\1\u026a\3\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\u026b\1\0\2\41"+
    "\1\u026b\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u026c\1\0\10\41\27\0\22\41\1\u026c\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u026d\13\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u026e\1\0\10\41\27\0\22\41\1\u026e\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\10\41"+
    "\1\u026f\1\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u0270\13\41"+
    "\1\0\6\41\1\u0270\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u0271\15\41\1\0\5\41\1\u0271\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u0272\1\0\10\41"+
    "\27\0\22\41\1\u0272\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\51\0\1\u0273\10\0\1\u0273\46\0\1\u0213"+
    "\62\0\1\u0213\37\0\1\u0274\62\0\1\u0274\116\0\1\u0213"+
    "\16\0\1\u0213\30\0\1\u0275\5\0\2\u024d\2\0\1\u024d"+
    "\32\0\1\u0275\47\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u0276\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u0277\15\41\1\0\5\41\1\u0277\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\14\41\1\u0278\10\41\1\0\1\41"+
    "\1\u0278\10\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\12\41"+
    "\3\0\4\41\1\0\2\41\1\u0279\1\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u027a\15\41"+
    "\1\0\5\41\1\u027a\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u027b\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\14\41"+
    "\1\u027c\10\41\1\0\1\41\1\u027c\10\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u027d\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\u027e\11\41\1\u027e\12\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\3\0\15\202\1\203\3\202\1\203"+
    "\14\202\1\203\4\202\1\203\26\202\1\u027f\3\202\1\u027f"+
    "\24\202\15\0\2\u0280\2\0\1\u0280\102\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u0281\10\41\1\u0281"+
    "\11\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u0282"+
    "\10\41\1\u0282\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\u0283\1\0\2\41\1\u0283\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u0284\1\0\10\41"+
    "\27\0\22\41\1\u0284\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\3\41\1\u0285\2\41\1\u0285\16\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\20\0\1\u0261\160\0\1\u0286"+
    "\23\0\1\u0286\24\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\25\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u0287\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u0288\15\41\1\0\5\41\1\u0288\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\u0289\1\0\2\41\1\u0289"+
    "\7\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\u028a\1\0\2\41"+
    "\1\u028a\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\1\u028b\11\41\1\u028b"+
    "\12\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\u028c\1\0\10\41\27\0\22\41\1\u028c"+
    "\2\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\25\41\1\0"+
    "\12\41\3\0\4\41\1\0\2\41\1\u028d\1\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\22\41\1\u028e"+
    "\2\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\3\41\1\u028f"+
    "\2\41\1\u028f\16\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0290\1\0\10\41\27\0"+
    "\22\41\1\u0290\2\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0291\1\0\10\41\27\0"+
    "\22\41\1\u0291\2\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0292\1\0\10\41\27\0"+
    "\22\41\1\u0292\2\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\52\0\1\u0213\2\0\1\u0213\115\0\1\u0213\13\0"+
    "\1\u0213\106\0\1\u0293\13\0\1\u0293\42\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\u0294\1\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\u0295\17\41\1\0"+
    "\3\41\1\u0295\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\25\41\1\0"+
    "\1\u0296\3\41\1\u0296\5\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0297\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0298\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0299\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\u029a\1\0\2\41\1\u029a\7\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\4\41\1\u029b\14\41\1\u029b\3\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\3\0\15\202\1\203\3\202\1\203"+
    "\14\202\1\203\4\202\1\203\7\202\1\u029c\23\202\1\u029c"+
    "\23\202\15\0\2\u0280\2\0\1\u0280\33\0\1\u029d\22\0"+
    "\1\u029d\23\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\u029e\1\0\2\41\1\u029e\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u029f\13\41\1\u029f\7\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\11\41\1\u02a0\3\0"+
    "\4\41\1\0\4\41\33\0\1\u02a1\73\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\u02a2\11\41\1\u02a2\12\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u02a3\1\0\10\41\27\0\22\41\1\u02a3\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u02a4\1\0\10\41\27\0\22\41\1\u02a4\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\u02a5\5\41\27\0\10\41"+
    "\1\u02a5\14\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\u02a6"+
    "\11\41\1\u02a6\12\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\u02a7\11\41\1\u02a7\12\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u02a8\15\41\1\0\5\41\1\u02a8\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\4\41\1\u02a9\14\41\1\u02a9\3\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\47\0\1\u02aa"+
    "\11\0\1\u02aa\45\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\u02ab\11\41\1\u02ab\12\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\2\41\1\u02ac\10\41\1\u02ac\11\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\u02ad\1\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\25\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\u02ae\1\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\u02af\11\41\1\u02af\12\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\12\41"+
    "\3\0\4\41\1\0\2\41\1\u02b0\1\41\3\0\15\202"+
    "\1\203\3\202\1\203\6\202\1\u02b1\5\202\1\203\4\202"+
    "\1\203\57\202\46\0\1\u02b2\10\0\1\u02b2\44\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\11\41"+
    "\1\u02b3\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u02b4\1\0\10\41\27\0\22\41\1\u02b4\2\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\20\0\2\u02a1\2\0"+
    "\1\u02a1\102\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\3\41\1\u02b5\2\41\1\u02b5\16\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\2\41\1\u02b6\5\41\27\0\10\41\1\u02b6\14\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\3\41\1\u02b7\2\41\1\u02b7"+
    "\16\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\14\41\1\u02b8"+
    "\10\41\1\0\1\41\1\u02b8\10\41\3\0\4\41\1\0"+
    "\4\41\113\0\1\u02b9\13\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\3\41\1\u02ba\2\41\1\u02ba\16\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\u02bb\1\0\2\41"+
    "\1\u02bb\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\12\41"+
    "\3\0\1\41\1\u02bc\2\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\25\41\1\0\12\41"+
    "\3\0\4\41\1\0\2\41\1\u02bd\1\41\3\0\15\202"+
    "\1\u02be\1\u02b1\2\202\1\u02be\14\202\1\203\4\202\1\203"+
    "\57\202\47\0\1\u02bf\2\0\1\u02bf\51\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\u02c0\1\0\2\41"+
    "\1\u02c0\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\u02c1\1\0"+
    "\2\41\1\u02c1\7\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\25\41\1\0"+
    "\12\41\3\0\4\41\1\0\2\41\1\u02c2\1\41\4\0"+
    "\1\41\1\0\1\u02c3\1\0\10\41\27\0\22\41\1\u02c3"+
    "\2\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\25\41\1\0"+
    "\1\u02c4\3\41\1\u02c4\5\41\3\0\4\41\1\0\4\41"+
    "\65\0\1\u02c5\16\0\1\u02c5\22\0\1\41\1\0\1\u02c6"+
    "\1\0\10\41\27\0\22\41\1\u02c6\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u02c7"+
    "\1\0\10\41\27\0\22\41\1\u02c7\2\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\12\41\3\0\4\41"+
    "\1\0\2\41\1\u02c8\1\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\25\41\1\0\12\41\3\0\4\41"+
    "\1\0\2\41\1\u02c9\1\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u02ca\17\41\1\0\3\41"+
    "\1\u02ca\6\41\3\0\4\41\1\0\4\41\105\0\1\u02cb"+
    "\21\0\1\41\1\0\1\41\1\0\10\41\27\0\25\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u02cc\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u02cd\13\41\1\0\6\41\1\u02cd\3\41\3\0\4\41"+
    "\1\0\4\41\51\0\1\u02ce\10\0\1\u02ce\44\0\1\41"+
    "\1\0\1\u02cf\1\0\10\41\27\0\22\41\1\u02cf\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\65\0\1\u02d0"+
    "\16\0\1\u02d0\22\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u02d1\13\41\1\u02d1\7\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\6\0\1\u02d2\62\0\1\u02d2"+
    "\51\0\2\u02d2\2\0\1\u02d2\5\0\1\u02d3\110\0\2\u02d3"+
    "\2\0\1\u02d3\1\0\1\u02d4\46\0\1\u02d5\3\0\1\u02d5"+
    "\5\0\1\u02d6\110\0\1\u02d7\3\0\1\u02d7\127\0\1\u02d8"+
    "\111\0\1\u02d9\3\0\1\u02d9\127\0\1\u02da\111\0\1\u02db"+
    "\3\0\1\u02db\127\0\1\u02dc\111\0\1\u02dd\3\0\1\u02dd"+
    "\41\0\2\u02db\2\0\1\u02db\6\0\1\u02de\164\0\1\u02df"+
    "\3\0\1\u02df\47\0\1\u02db\203\0\1\u02db\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[47974];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\2\1\1\11\12\1\2\11\2\1\3\11\13\1"+
    "\1\11\26\1\1\11\5\1\2\11\2\1\1\11\6\1"+
    "\1\11\12\1\1\11\4\1\1\0\1\1\1\11\2\1"+
    "\1\11\2\1\2\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\2\1\1\0"+
    "\2\1\1\0\1\1\2\0\6\1\1\11\2\0\4\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\11\2\0\2\1"+
    "\1\0\53\1\13\0\2\1\1\11\1\1\3\0\3\1"+
    "\3\11\1\1\3\0\3\1\2\11\3\0\1\1\2\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\1\1\0\1\11\1\0\2\11"+
    "\2\1\1\11\3\0\15\1\1\0\1\1\3\0\55\1"+
    "\12\0\12\1\1\11\3\1\1\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\20\1\4\0\52\1\12\0\13\1\1\11\1\0"+
    "\1\1\1\11\1\0\15\1\1\11\1\1\3\0\42\1"+
    "\10\0\1\11\1\0\14\1\1\0\11\1\3\0\27\1"+
    "\5\0\23\1\1\11\1\1\1\0\17\1\3\0\12\1"+
    "\1\0\5\1\1\0\14\1\1\0\11\1\1\0\14\1"+
    "\1\0\7\1\1\0\6\1\1\11\5\1\1\0\5\1"+
    "\1\0\5\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[735];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private int parenBalanceInConst = 0; // for context sensitive lexer
    private int bracketBalanceInConst = 0; // for context sensitive lexer
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private boolean isInConst;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 159: break;
        case 94:
          { return PHPTokenId.PHP_FALSE;
          }
        case 160: break;
        case 22:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 161: break;
        case 30:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 162: break;
        case 73:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 163: break;
        case 4:
          { if(isInConst) {
        // for checking arrays
        // e.g. const CONST = [1, 2], const GOTO = 1;
        String text = yytext();
        switch (text) {
            case "[":
                bracketBalanceInConst++;
                break;
            case "]":
                bracketBalanceInConst--;
                break;
            case "(":
                parenBalanceInConst++;
                break;
            case ")":
                parenBalanceInConst--;
                break;
            default:
                break;
        }
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 164: break;
        case 60:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 165: break;
        case 129:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 166: break;
        case 148:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 167: break;
        case 32:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 168: break;
        case 119:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 169: break;
        case 155:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 170: break;
        case 18:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 171: break;
        case 36:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 172: break;
        case 50:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 173: break;
        case 115:
          { return PHPTokenId.PHP_TYPE_OBJECT;
          }
        case 174: break;
        case 85:
          { return PHPTokenId.PHP_LIST;
          }
        case 175: break;
        case 93:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 176: break;
        case 15:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 177: break;
        case 90:
          { return PHPTokenId.PHP_CASE;
          }
        case 178: break;
        case 38:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 179: break;
        case 41:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 180: break;
        case 8:
          { if(isInConst) {
        isInConst = false;
        parenBalanceInConst = 0;
        bracketBalanceInConst = 0;
    }
    return PHPTokenId.PHP_SEMICOLON;
          }
        case 181: break;
        case 40:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 182: break;
        case 31:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 183: break;
        case 82:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 184: break;
        case 99:
          { return PHPTokenId.PHP_ISSET;
          }
        case 185: break;
        case 138:
          { return PHPTokenId.PHP__FILE__;
          }
        case 186: break;
        case 45:
          { return PHPTokenId.PHP_IF;
          }
        case 187: break;
        case 51:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 188: break;
        case 62:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 189: break;
        case 43:
          { return PHPTokenId.PHP_AS;
          }
        case 190: break;
        case 157:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 191: break;
        case 70:
          { return PHPTokenId.PHP_USE;
          }
        case 192: break;
        case 102:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 193: break;
        case 156:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 194: break;
        case 61:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 195: break;
        case 154:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 196: break;
        case 141:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 197: break;
        case 13:
          { if (isInConst) {
        pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 198: break;
        case 59:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 199: break;
        case 135:
          { return PHPTokenId.PHP_ITERABLE;
          }
        case 200: break;
        case 97:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 201: break;
        case 58:
          { // const keyword is also used within group uses. so check "=", otherwise it matches the following:
    // use A\{const CONSTANTA, function myFunction,...}
    popState();
    String match = yytext();
    String[] segments = match.split("[ \n\r\t]+");
    int back = 1;
    if(segments.length > 1) {
        int wsLength = yylength() - 1 - segments[0].length(); // - "=" - {LABEL}
        back +=  wsLength;
    }
    yypushback(back);
    return PHPTokenId.PHP_STRING;
          }
        case 202: break;
        case 34:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 203: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 204: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 205: break;
        case 47:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 206: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 207: break;
        case 71:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 208: break;
        case 126:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 209: break;
        case 128:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 210: break;
        case 105:
          { return PHPTokenId.PHP_CLONE;
          }
        case 211: break;
        case 100:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 212: break;
        case 49:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 213: break;
        case 65:
          { return PHPTokenId.PHP_NEW;
          }
        case 214: break;
        case 76:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 215: break;
        case 57:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 216: break;
        case 19:
          { yypushback(1);
        popState();
          }
        case 217: break;
        case 122:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 218: break;
        case 83:
          { return PHPTokenId.PHP_NULL;
          }
        case 219: break;
        case 91:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 220: break;
        case 111:
          { return PHPTokenId.PHP_WHILE;
          }
        case 221: break;
        case 140:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 222: break;
        case 130:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 223: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 224: break;
        case 151:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 225: break;
        case 92:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 226: break;
        case 28:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 227: break;
        case 116:
          { return PHPTokenId.PHP_STATIC;
          }
        case 228: break;
        case 127:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 229: break;
        case 17:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 230: break;
        case 25:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 231: break;
        case 37:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 232: break;
        case 139:
          { return PHPTokenId.PHP__LINE__;
          }
        case 233: break;
        case 78:
          { return PHPTokenId.PHP_EXIT;
          }
        case 234: break;
        case 35:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 235: break;
        case 39:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 236: break;
        case 96:
          { return PHPTokenId.PHP_BREAK;
          }
        case 237: break;
        case 26:
          { if(parenBalanceInConst == 0 && bracketBalanceInConst == 0) {
        isInConst = false;
    }
    yypushback(1);
    popState();
          }
        case 238: break;
        case 21:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 239: break;
        case 143:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 240: break;
        case 144:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 241: break;
        case 63:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 242: break;
        case 107:
          { return PHPTokenId.PHP_PRINT;
          }
        case 243: break;
        case 69:
          { return PHPTokenId.PHP_VAR;
          }
        case 244: break;
        case 158:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 245: break;
        case 101:
          { return PHPTokenId.PHP_THROW;
          }
        case 246: break;
        case 120:
          { return PHPTokenId.PHP_PARENT;
          }
        case 247: break;
        case 118:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 248: break;
        case 74:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 249: break;
        case 77:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 250: break;
        case 67:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 251: break;
        case 109:
          { return PHPTokenId.PHP_CASTING;
          }
        case 252: break;
        case 42:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 253: break;
        case 33:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 254: break;
        case 66:
          { return PHPTokenId.PHP_DIE;
          }
        case 255: break;
        case 146:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 256: break;
        case 75:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
       label_len--;
           back++;
    }
    if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
        back = back + hereocLength;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 257: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 258: break;
        case 106:
          { return PHPTokenId.PHP_CLASS;
          }
        case 259: break;
        case 124:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 260: break;
        case 142:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 261: break;
        case 145:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 262: break;
        case 108:
          { return PHPTokenId.PHP_UNSET;
          }
        case 263: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 264: break;
        case 23:
          { yypushback(1);
    popState();
          }
        case 265: break;
        case 121:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 266: break;
        case 153:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 267: break;
        case 147:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 268: break;
        case 117:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 269: break;
        case 80:
          { return PHPTokenId.PHP_EVAL;
          }
        case 270: break;
        case 87:
          { return PHPTokenId.PHP_GOTO;
          }
        case 271: break;
        case 103:
          { isInConst = true;
    parenBalanceInConst = 0;
    bracketBalanceInConst = 0;
    pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    return PHPTokenId.PHP_CONST;
          }
        case 272: break;
        case 20:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 273: break;
        case 134:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 274: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 275: break;
        case 81:
          { return PHPTokenId.PHP_ECHO;
          }
        case 276: break;
        case 95:
          { return PHPTokenId.PHP_FINAL;
          }
        case 277: break;
        case 152:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 278: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 279: break;
        case 110:
          { return PHPTokenId.PHP_YIELD;
          }
        case 280: break;
        case 133:
          { pushState(ST_PHP_LOOKING_FOR_FUNCTION_NAME);
    return PHPTokenId.PHP_FUNCTION;
          }
        case 281: break;
        case 131:
          { return PHPTokenId.PHP__DIR__;
          }
        case 282: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 283: break;
        case 136:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 284: break;
        case 150:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 285: break;
        case 68:
          { return PHPTokenId.PHP_TRY;
          }
        case 286: break;
        case 98:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 287: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 288: break;
        case 114:
          { return PHPTokenId.PHP_RETURN;
          }
        case 289: break;
        case 29:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 290: break;
        case 16:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 291: break;
        case 104:
          { return PHPTokenId.PHP_CATCH;
          }
        case 292: break;
        case 72:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 293: break;
        case 52:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 294: break;
        case 137:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 295: break;
        case 149:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 296: break;
        case 54:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 297: break;
        case 125:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 298: break;
        case 88:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 299: break;
        case 112:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 300: break;
        case 64:
          { return PHPTokenId.PHP_FOR;
          }
        case 301: break;
        case 55:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==hereocLength && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 302: break;
        case 123:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 303: break;
        case 46:
          { pushState(ST_PHP_LOOKING_FOR_STATIC_PROPERTY);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 304: break;
        case 24:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 305: break;
        case 79:
          { return PHPTokenId.PHP_ELSE;
          }
        case 306: break;
        case 86:
          { return PHPTokenId.PHP_SELF;
          }
        case 307: break;
        case 56:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 308: break;
        case 48:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 309: break;
        case 14:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 310: break;
        case 44:
          { return PHPTokenId.PHP_DO;
          }
        case 311: break;
        case 53:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 312: break;
        case 89:
          { return PHPTokenId.PHP_TYPE_VOID;
          }
        case 313: break;
        case 132:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 314: break;
        case 113:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 315: break;
        case 84:
          { return PHPTokenId.PHP_TRUE;
          }
        case 316: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 736: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 737: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
